#!/usr/bin/env python
"""
MDB.

https://github.com/GII/MDB
"""

# Python 2 compatibility imports
from __future__ import absolute_import, division, print_function
from future import standard_library

standard_library.install_aliases()
from builtins import object

# Standard imports
import math

# Library imports
import rospy
from std_msgs.msg import Int8, Int16, Int32
from geometry_msgs.msg import Vector3

# MDB imports
from robobo_msgs.srv import MoveWheels, SetSensorFrequency


class robobo_joystick_control(object):
    def __init__(self):

        self.neutral_x = 507.0
        self.neutral_y = 499.0
        self.max_velocity = rospy.get_param("~joystick_velocity")
        self.loop_rate = rospy.Rate(rospy.get_param("~joystick_rate"))

        self.max_module = math.sqrt((self.neutral_x ** 2) + (self.neutral_y ** 2))
        self.joystick_data = None

        try:
            self.robobo_mW_proxy = rospy.ServiceProxy("/robot/moveWheels", MoveWheels)
            self.robobo_sSF_proxy = rospy.ServiceProxy("/robot/setSensorFrequency", SetSensorFrequency)
        except rospy.ServiceException as e:
            print("Service exception", e)
            exit(1)

        self.rob_joy_sb = rospy.Subscriber("/joystick/data", Vector3, self.rob_joy_cb)

    def rob_joy_cb(self, msg):
        self.joystick_data = msg

    def normalize_joystick_values(self, x, y):
        return x - self.neutral_x, y - self.neutral_y

    def is_neutral(self, x, y):
        result = False
        if (-50 < x < 50) and (-50 < y < 50):
            result = True
        return result

    def adquire_wheels_speed(self, x, y, turn_coef=3):
        y = -y
        x = -x
        alpha = 0.5 * math.atan2(y, x)
        m = math.sqrt((x ** 2) + (y ** 2))
        beta = alpha + 0.785
        left_speed = (self.max_velocity / self.max_module) * m * math.cos(beta)
        right_speed = (self.max_velocity / self.max_module) * m * math.sin(beta)
        return left_speed, right_speed

    def joystick_rob_move(self, x, y, time):
        (l_wheel, r_wheel) = self.adquire_wheels_speed(x, y)
        self.robobo_mW_proxy.wait_for_service()
        self.robobo_mW_proxy(Int8(l_wheel), Int8(r_wheel), Int32(time), Int16(0))

    def control_robobo(self):
        self.robobo_sSF_proxy.wait_for_service()
        self.robobo_sSF_proxy(Int8(3))
        while not rospy.is_shutdown():
            if self.joystick_data:
                rospy.loginfo(
                    "command: "
                    + str(self.joystick_data.x)
                    + " "
                    + str(self.joystick_data.y)
                    + " "
                    + str(self.joystick_data.z)
                )
                (nx, ny) = self.normalize_joystick_values(self.joystick_data.x, self.joystick_data.y)
                self.joystick_rob_move(ny, nx, (1.5 * 1000.0 / rospy.get_param("~joystick_rate")))
            self.loop_rate.sleep()


if __name__ == "__main__":
    rospy.init_node("robobo_joystick_control")
    rjc = robobo_joystick_control()
    rjc.control_robobo()
    rospy.spin()
