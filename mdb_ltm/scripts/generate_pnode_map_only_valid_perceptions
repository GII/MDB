#!/usr/bin/env python
"""
The shiny, all new, MDB 3.0.

Available from (we are still thinking about this...)
Copyright 2017 Richard J. Duro, Jose A. Becerra.
Distributed under the (yes, we are still thinking about this too...).
"""

import math
import argparse
import numpy
from mdb_ltm.pnode import PNode
from mdb_ltm.localsim_communicator import LocalsimCommunicator as lc

# CAMBIAR ESTO PARA QUE LAS LLAMADAS A LOS METODOS DEL SIMULADOR SEAN SIN NORMALIZAR

def load_pnodes_file(file_name, pnode_name, iteration):
    """Load P-nodes from a file."""
    pnodes_file = open(file_name, 'r')
    headers = pnodes_file.readline().split()
    pnode = PNode(ident=pnode_name, node_type='PNode')
    # Load points from the right P-node at the right iteration into the P-node object
    for line in pnodes_file:
        items = line.split()
        if int(items[0]) == iteration and items[1] == pnode_name:
            last = len(items) - 1
            perception = [float(i) for i in items[2:last]]
            confidence = float(items[last])
            pnode.add_perception(perception, confidence)
    pnodes_file.close()
    return headers, pnode


def print_headers(headers):
    """Print headers (sensors' names)."""
    line = ''
    for header in headers:
        line += header + '\t'
    print line


def print_line(pnode, perception, line_start):
    """Print a line with a point in the input space and the corresponding activation value for the indicated P-node."""
    pnode.update_activation(perception)
    line = line_start
    for sensor in perception:
        line += '{:.2f}'.format(sensor) + '\t'
    line += '{:.2f}'.format(pnode.activation)
    print line


def scan_values(headers, pnode, step, line_start):
    """Calculate the P-Node activation for every point in a multidimensional grid."""
    perception = [0] * pnode.n_perceptions
    perception[headers['box_size']] = 0.9
    for ball_x in numpy.arange(-107, 107, 5):
        for ball_y in numpy.arange(35, 127, 5):
            ball_dist = (numpy.linalg.norm([ball_x, ball_y]) - 20.0) / (188.0 - 20.0)
            ball_ang = (180.0 / 81.0) * (numpy.arctan2(ball_x, ball_y) / math.pi)
            if not lc.object_too_close(ball_dist, ball_ang):
                perception[headers['ball_dist']] = ball_dist
                perception[headers['ball_ang']] = ball_ang
                for box_x in numpy.arange(-107, 107, 5):
                    for box_y in numpy.arange(35, 127, 5):
                        box_dist = (numpy.linalg.norm([box_x, box_y]) - 20.0) / (188.0 - 20.0)
                        box_ang = (180.0 / 81.0) * (numpy.arctan2(box_x, box_y) / math.pi)
                        if not lc.object_too_close(box_dist, box_ang):
                            perception[headers['box_dist']] = box_dist
                            perception[headers['box_ang']] = box_ang
                            perception[headers['ball_size']] = 0.85
                            perception[headers['ball_in_left_hand']] = 0.0
                            perception[headers['ball_in_right_hand']] = 0.0
                            print_line(pnode, perception, line_start)
                            perception[headers['ball_in_left_hand']] = 1.0
                            perception[headers['ball_in_right_hand']] = 1.0
                            if lc.object_pickable_withtwohands(ball_dist, 188.0, 20.0, ball_ang, 81.0):
                                print_line(pnode, perception, line_start)
                            perception[headers['ball_size']] = 0.15
                            perception[headers['ball_in_left_hand']] = 0.0
                            perception[headers['ball_in_right_hand']] = 0.0
                            print_line(pnode, perception, line_start)
                            perception[headers['ball_in_left_hand']] = 0.0
                            perception[headers['ball_in_right_hand']] = 1.0
                            if (ball_ang > 0) and (not lc.object_too_far(ball_dist, ball_ang)):
                                print_line(pnode, perception, line_start)
                            perception[headers['ball_in_left_hand']] = 1.0
                            perception[headers['ball_in_right_hand']] = 0.0
                            if (ball_ang <= 0) and (not lc.object_too_far(ball_dist, ball_ang)):
                                print_line(pnode, perception, line_start)
                            perception[headers['ball_in_left_hand']] = 1.0
                            perception[headers['ball_in_right_hand']] = 1.0
                            if lc.object_pickable_withtwohands(ball_dist, 188.0, 20.0, ball_ang, 81.0):
                                print_line(pnode, perception, line_start)


def generate_pnode_map():
    """Calculate the activation map for a given pnode."""
    parser = argparse.ArgumentParser(
        description='This script calculate the activation map for a P-node using the results of an experiment')
    parser.add_argument(
        '-f', '--file', help='File with all the points of all the P-nodes for every iteration of an experiment')
    parser.add_argument('-p', '--pnode', help='Id of the P-node for which we want to generate the activation map')
    parser.add_argument('-i', '--iteration', type=int, help='The number of the iteration we want to inspect')
    parser.add_argument('-s', '--step', type=float, help='Resolution')
    args, _ = parser.parse_known_args()
    kwargs = vars(args)
    file_name = kwargs['file']
    pnode_name = kwargs['pnode']
    iteration = kwargs['iteration']
    step = kwargs['step']
    if (file_name is None) or (iteration is None) or (pnode_name is None):
        parser.print_help()
    else:
        headers, pnode = load_pnodes_file(file_name, pnode_name, iteration)
        # Scan all dimensions to generate activation map
        print_headers(headers)
        last = len(headers) - 1
        indexes = {}
        for i, sensor in enumerate(headers[2:last]):
            indexes[sensor] = i
        scan_values(indexes, pnode, step, str(iteration) + '\t' + pnode_name + '\t')


if __name__ == '__main__':
    generate_pnode_map()
