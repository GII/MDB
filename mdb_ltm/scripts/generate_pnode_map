#!/usr/bin/env python
"""
MDB.

https://github.com/GII/MDB
"""

import importlib
import argparse
from numpy import arange

from mdb_ltm.ltm import LTM


def scan_values(pnode, step, perception, n_sensor, idents, sensing_template, line):
    """Recursive function that allows to calculate the P-Node activation for every point in a multidimensional grid."""
    if "distance" in idents[n_sensor]:
        begin = 0.0
        end = 1.000001
        sensor_step = step
    elif "angle" in idents[n_sensor]:
        begin = 0.0
        end = 1.000001
        sensor_step = step
    elif ("cylinder" in idents[n_sensor]) and ("diameter" in idents[n_sensor]):
        begin = 0.2
        end = 0.5
        sensor_step = 0.04 / 0.15
    elif ("box" in idents[n_sensor]) and ("diameter" in idents[n_sensor]):
        begin = 0.8
        end = 0.85
        sensor_step = 0.1
    elif "hand" in idents[n_sensor]:
        begin = 0.0
        end = 1.1
        sensor_step = 1.0
    if n_sensor == len(idents) - 1:
        for value in arange(begin, end, sensor_step):
            perception[n_sensor] = value
            sensing = fill_template(sensing_template, perception)
            pnode.update_activation(perception=sensing)
            print(line + f"{value:.2f}" + "\t" + f"{pnode.activation[0]:.2f}")
    else:
        for value in arange(begin, end, sensor_step):
            perception[n_sensor] = value
            scan_values(
                pnode,
                step,
                perception,
                n_sensor + 1,
                idents,
                sensing_template,
                line + f"{value:.2f}" + "\t",
            )


def reconstruct_sensing_dictionary(headers):
    sensing_template = {}
    one_sensing = {}
    one_sensing_id = 0
    for item in headers:
        elements = item.split("_")
        id = int(elements[0])
        if id == one_sensing_id:
            name = "".join(elements[1:-1])
            attribute = elements[-1]
            one_sensing[attribute] = None
        else:
            if not name in sensing_template:
                sensing_template[name] = []
            sensing_template[name].append(one_sensing)
            name = "".join(elements[1:-1])
            attribute = elements[-1]
            one_sensing = {attribute: None}
            one_sensing_id = id
    if not name in sensing_template:
        sensing_template[name] = []
    sensing_template[name].append(one_sensing)
    return sensing_template


def create_pnode(pnode_name, space_class):
    module_string, _, class_string = "mdb_ltm.pnode.PNode".rpartition(".")
    node_module = importlib.import_module(module_string)
    node_class = getattr(node_module, class_string)
    return node_class(ident=pnode_name, node_type="PNode", space_class=space_class)


def fill_template(sensing_template, items):
    sensing = {}
    pos = 0
    for sensor in sensing_template:
        sensing[sensor] = []
        for reading in sensing_template[sensor]:
            dictio = {}
            for attribute in reading:
                dictio[attribute] = float(items[pos])
                pos += 1
            sensing[sensor].append(dictio)
    return sensing


def load_pnodes_file(file_name, pnode_name, iteration, space_class):
    """Load P-nodes from a file."""
    pnodes_file = open(file_name, "r")
    headers = pnodes_file.readline().split()
    sensing_template = reconstruct_sensing_dictionary(headers[2 : len(headers) - 1])
    pnode = create_pnode(pnode_name, space_class)
    # Load points from the right P-node at the right iteration into the P-node object
    for line in pnodes_file:
        items = line.split()
        if int(items[0]) == iteration and items[1] == pnode_name:
            sensing = fill_template(sensing_template, items[2 : len(items) - 1])
            pnode.add_perception(LTM.create_perception(sensing), float(items[-1]))
    pnodes_file.close()
    return pnode, headers, sensing_template


def print_headers(headers):
    """Print headers (sensors' names)."""
    line = ""
    for header in headers:
        line += header + "\t"
    print(line)


def generate_pnode_map():
    """Calculate the activation map for a given pnode."""
    parser = argparse.ArgumentParser(
        description="This script calculate the activation map for a P-node using the results of an experiment"
    )
    parser.add_argument(
        "-f",
        "--file",
        help="File with all the points of all the P-nodes for every iteration of an experiment",
    )
    parser.add_argument(
        "-p",
        "--pnode",
        help="Id of the P-node for which we want to generate the activation map",
    )
    parser.add_argument(
        "-i",
        "--iteration",
        type=int,
        help="The number of the iteration we want to inspect",
    )
    parser.add_argument("-s", "--step", type=float, help="Resolution")
    parser.add_argument("-t", "--space_class", help="The P-Node's representation class for points")
    args, _ = parser.parse_known_args()
    kwargs = vars(args)
    file_name = kwargs["file"]
    pnode_name = kwargs["pnode"]
    iteration = kwargs["iteration"]
    step = kwargs["step"]
    space_class = kwargs["space_class"]
    if (
        (file_name is None)
        or (pnode_name is None)
        or (iteration is None)
        or (step is None)
        or (space_class is None)
    ):
        parser.print_help()
    else:
        pnode, headers, sensing_template = load_pnodes_file(
            file_name, pnode_name, iteration, space_class
        )
        # Scan all dimensions to generate activation map
        perception = [0] * len(headers[2 : len(headers) - 1])
        print_headers(headers)
        scan_values(
            pnode,
            step,
            perception,
            0,
            headers[2 : len(headers) - 1],
            sensing_template,
            str(iteration) + "\t" + pnode_name + "\t",
        )


if __name__ == "__main__":
    generate_pnode_map()
