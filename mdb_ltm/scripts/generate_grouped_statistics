#!/usr/bin/env python
"""
The shiny, all new, MDB 3.0.

Available from (we are still thinking about this...)
Copyright 2017 Richard J. Duro, Jose A. Becerra.
Distributed under the (yes, we are still thinking about this too...).
"""

import argparse
from distutils.util import strtobool


def generate_grouped_statistics():
    """Calculate several statistics using bunchs of iterations."""
    parser = argparse.ArgumentParser(
        description='This script calculate several statistics for LTM experiments using bunchs of iterations')
    parser.add_argument('-f', '--file', help='File with statistics for every iteration of an experiment')
    parser.add_argument(
        '-n', '--iterations', type=int, help='Number of consecutive iterations used to calculate the statistics')
    args, _ = parser.parse_known_args()
    kwargs = vars(args)
    iterations = kwargs['iterations']
    file_name = kwargs['file']
    if (iterations is None) or (file_name is None):
        parser.print_help()
    else:
        stat_file = open(file_name, 'r')
        stat_file.readline()
        accumulated_reward = 0.0
        nochange_iterations = 0
        rewarded_iterations = 0
        for line in stat_file:
            iteration, _, _, reward, _, changes, c_nodes = line.split()
            iteration = int(iteration)
            reward = float(reward)
            changes = strtobool(changes)
            c_nodes = int(c_nodes)
            accumulated_reward += reward
            if not changes:
                nochange_iterations += 1
            if reward >= 0.01:
                rewarded_iterations += 1
            if iteration % iterations == 0 and iteration > 0:
                print str(iteration) + '\t' + str(
                    accumulated_reward / iterations) + '\t' + str(nochange_iterations) + '\t' + str(rewarded_iterations)
                accumulated_reward = 0.0
                nochange_iterations = 0
                rewarded_iterations = 0


if __name__ == '__main__':
    generate_grouped_statistics()
