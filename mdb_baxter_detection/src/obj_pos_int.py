#!/usr/bin/env python

import cv2, math, rospy, sys
import numpy as np
import scipy.interpolate
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image, PointCloud2
from std_msgs.msg import Bool, String
import sensor_msgs.point_cloud2 as pc2
import tf
from mdb_common.msg import ObjDet, MObjDet
from mdb_common.msg import SensData


class obj_pos_int:
	def __init__(self):
		rospy.init_node('obj_pos_int')
		
		self.br = tf.TransformBroadcaster()
		self.tflistener = tf.TransformListener()

		self.obj_type = rospy.get_param("~obj_type")
		self.camera_frame = rospy.get_param("~camera_frame")

		self.obj_sensor_pub = rospy.Publisher("/mdb_baxter/"+self.obj_type, SensData, queue_size = 1)
		self.track_sub = rospy.Subscriber("/tracking/"+self.obj_type, ObjDet, self.track_cb)

		#self.primary = np.array ([[214., 103., 0.], [272., 49., 0.], [174., 209., 0.], [176., 301., 0.], [269., 319., 0.], [381., 320., 0.], [384., 165., 0.], [383., 46., 0.], [277., 198., 0.], [173., 375., 0.], [193., 496., 0.], [253., 591., 0.], [305., 611., 0.], [385., 613., 0.], [384., 479., 0.], [379., 364., 0.], [299., 499., 0.], [276., 383., 0.], [213., 613., 0.], [123., 612., 0.], [122., 539., 0.], [213., 44., 0.], [124., 45., 0.], [124., 129., 0.], [124., 323., 0.]])

		#self.secondary = np.array ([[0.99116863, 0.87833496, 0.], [0.78655621, 1.100635, 0.], [1.15806058, 0.47319848, 0.], [1.16307284, 0.12365565, 0.], [0.80116698, 0.05066453, 0.], [0.3551138, 0.05158981, 0.], [0.3356344, 0.63588357, 0.], [0.335732, 1.09875920, 0.], [0.75284233, 0.12569140, 0.], [1.17461486, -0.16657672, 0.], [1.10605931, -0.63260934, 0.], [0.88366184, -1.0144246, 0.], [0.67725525, -1.09489974, 0.], [0.37766506, -1.11046513, 0.], [0.366396098, -0.58260464, 0.], [0.37457953, -0.13952977, 0.], [0.699940230, -0.649240083, 0.], [0.776855053, -0.2018306452, 0.], [1.0196535496, -1.10512675, 0.], [1.36465355, -1.10512675, 0.], [1.36465355, -0.82512675, 0.], [1.007933519, 1.103802669, 0.], [1.342933519, 1.103802669, 0.], [1.342933519, 0.786802669, 0.], [1.342933519, 0.046802669, 0.]])'''

		#self.pixel_list = np.array([[386,46],[330, 46],[281, 45],[229, 45],[176, 45],[124, 44],[384, 190],[330, 190],[284, 189],[231, 188],[177, 187],[124, 187],[384, 332],[331, 332],[282, 332],[229, 331],[177, 330],[124, 329],[384, 474],[331, 474],[281, 473],[229, 472],[177, 472],[124, 472],[384, 613],[333,613],[281, 612],[229, 611],[177, 611],[124, 612]])
		#self.position_list = np.array([[0.340709792179, 1.08646213168],[0.560092952931, 1.09138499826],[0.742049613017, 1.09361753535],[0.944049613, 1.09361753535],[1.146049613, 1.09361753535],[1.348049613, 1.09361753535],[0.345142367872, 0.524737299093],[0.553440890619, 0.53465533419],[0.734496978714, 0.540446436949],[0.951080250146, 0.54959706672],[0.951080250146+0.202,0.54959706672],[0.951080250146+0.202+0.202,0.54959706672],[0.351541588352, -0.0207338474929],[0.562463273901, -0.0130107720743],[0.745421266508,-0.00431787121768],[0.953861902142, -0.000798950986559],[0.953861902142+0.202,-0.000798950986559],[0.953861902142+0.202+0.202,-0.000798950986559],[0.356856941548, -0.565516967731],[0.560550325106, -0.561985853448],[0.753340428103, -0.555970456718],[0.969184029962, -0.548429832751],[0.969184029962+0.202,-0.548429832751],[0.969184029962+0.202+0.202,-0.548429832751],[0.366659541918, -1.11617504254],[0.563510124249, -1.10728365181],[0.768046651271, -1.11061673196],[0.768046651271+0.202,-1.11061673196],[0.768046651271+0.202+0.202,-1.11061673196],[0.768046651271+0.202+0.202+0.202,-1.11061673196]])

		#self.pixel_list = np.array([[390, 43],[333, 44],[284,44], [233,43], [181, 44], [128, 44], [390, 188], [334, 188], [289, 187], [235, 187], [183, 186], [128, 187],[391, 329], [338, 329],[288, 330],[236, 328],[182, 327],[128, 329],[391, 471],[338, 470],[288, 471],[237, 470],[184, 469],[130, 469], [392, 610],[341, 610],[289, 610],[237, 608],[185, 609],[131, 609]])
		#self.position_list = np.array([[0.334546488923, 1.09411788882], [0.544095704039, 1.09382632172], [0.727806849754, 1.09985447903], [0.727806849754+0.20, 1.09985447903], [0.727806849754+0.20+0.20, 1.09985447903], [0.727806849754+0.20+0.20+0.20, 1.09985447903], [0.338238645982, 0.532943045438], [0.531779741896, 0.543789563109], [0.711992844875, 0.551157966306], [0.925572148766, 0.551815665872], [1.13908085427, 0.54654224459], [1.13908085427+0.20, 0.54654224459], [0.324246483379, -0.0166637370686],[0.543367700498, -0.0019592924007],[0.730383515092, 0.00845735535003], [0.929809601589, 0.00236302450045], [1.13630184594, 0.00737402230341],[1.13630184594+0.20, 0.00737402230341], [0.327832584016, -0.550291105734],[0.532634367714, 0.532634367714],[0.722080577051,-0.546867723295],[0.932068295946, -0.543014882577],[1.14223207722, -0.543975942593],[1.14223207722+0.20, -0.543975942593],[0.328630749416, -1.10993616529],[0.531414735936, -1.10937555392],[0.728929139832, -1.0977829963],[0.728929139832+0.2, -1.0977829963],[0.728929139832+0.2+0.2, -1.0977829963],[0.728929139832+0.2+0.2+0.2, -1.0977829963]])

		#self.primary =  np.delete(self.primary, 2, 1)
		#self.secondary = np.delete(self.secondary, 2, 1)

		self.pixel_list = np.array([[378, 31], [378, 95], [380, 159], [379, 478], [380, 540], [379, 601], [348, 31], [348, 95], [349, 159], [348, 221], [347, 286], [346, 351], [349, 415], [349, 478], [350, 539], [351, 601], [318, 32], [318, 95], [318, 159], [318, 223], [318, 286], [317, 352], [319, 416], [320, 478], [320, 539], [321, 601], [288, 31], [288, 96], [288, 159], [289, 223], [288, 286], [288, 353], [289, 416], [291, 478], [291, 540], [291, 601], [259, 32], [257, 96], [258, 160], [259, 223], [260, 288], [259, 352], [259, 415], [261, 477], [261, 539], [262, 602], [229, 33], [228, 97], [229, 162], [230, 226], [230, 289], [230, 353], [231, 415], [231, 477], [231, 539], [231, 601], [199, 33], [200, 97], [200, 161], [200, 225], [201, 289], [200, 352], [202, 415], [203, 477], [202, 538], [202, 601], [172, 33], [172, 98], [171, 163], [170, 226], [171, 289], [170, 352], [172, 414], [172, 477], [174, 538], [174, 602], [143, 34], [143, 99], [142, 163], [142, 227], [142, 290], [142, 354], [143, 415], [144, 447], [145, 538], [145, 600], [113, 34], [113, 99], [113, 164], [113, 228], [114, 291], [114, 354], [115, 415], [115, 477], [116, 538], [117, 601]])

		self.position_list = np.array([[0.3129268861696984, 1.0915125371012766], [0.31640059095374035, 0.8538659485323415], [0.31526034675454084, 0.6093222513006251], [0.31583665149214546, -0.6073845730733649], [0.30874790243074945, -0.8594064991321724], [0.3138675147585257, -1.0967604630830563], [0.42613683690973003, 1.0927438268045788], [0.41881562923994736, 0.8560178474765587], [0.42975814124472755, 0.6097818570275706], [0.42739461635608955, 0.36602382617035634], [0.4312162899125014, 0.12483384845625516], [0.42701182950070576, -0.12424820884094945], [0.4265676967288064, -0.36981825131879137], [0.42686116834688526, -0.608953918132541], [0.41980014129326076, -0.8609408855119116], [0.4265191596940549, -1.097265880284272], [0.5391231960651873, 1.0941461420264826], [0.5366410226472468, 0.8574097366501255], [0.5463994063804903, 0.6079497117473115], [0.5417261343041281, 0.3651432206318277], [0.5430317721992272, 0.12146899651986769], [0.5400841592563206, -0.11781935812273232], [0.5581490286355304, -0.37212471360738836], [0.542206914710711, -0.6095654970953795], [0.5362990464179102, -0.8655287254623987], [0.5419963228214186, -1.1004333862078082], [0.6555860034778832, 1.0955061370855175], [0.6481798514710075, 0.8518441991914568], [0.6472258263963282, 0.6171734685994826], [0.6591911988128215, 0.36385760184893173], [0.6570901473689363, 0.12421327538620444], [0.6533392248403259, -0.1242864960799916], [0.6529279219874851, -0.3691567041458656], [0.6487424262141467, -0.6209289144089435], [0.6485948770513309, -0.8594816886888001], [0.6552453014356937, -1.1009970923897663], [0.7709146545856865, 1.0990006786189168], [0.7667966385395186, 0.8516871999432534], [0.7673114098240121, 0.6132793184120856], [0.7698995703109751, 0.3735041201910416], [0.7711743974446646, 0.12559853288458592], [0.7675028416100254, -0.12178546633130846], [0.7709381009726795, -0.3769502193673821], [0.7693818564522329, -0.6151763570623435], [0.7693454316098614, -0.8556747253758211], [0.7725549544187333, -1.1002276781572795], [0.8804170304057395, 1.0990006786189168], [0.8824015109974921, 0.8539247567317475], [0.881287564752361, 0.612061563874262], [0.8785606773295612, 0.36955518984784547], [0.8804170304057395, 0.12642657972732071], [0.8814424910877507, -0.1262284239807433], [0.8800037564692739, -0.3705682045799828], [0.8819627531509804, -0.6118911760710922], [0.8841387066140266, -0.8568668408927812], [0.8804170304057395, -1.1002276781572795], [1.00197977064437, 1.0990006786189168], [1.00197977064437, 0.8539976380583784], [0.9968118045101328, 0.6105002775829952], [0.9944662710926897, 0.3658581906741624], [0.9969036814229588, 0.12649582611103227], [0.9949197253768902, -0.12335178887962615], [0.9953086030418682, -0.36864617208515904], [0.9973434001305821, -0.6122020104777801], [1.0008920014833935, -0.8546898340623449], [1.0008920014833935, -1.1002276781572795], [1.1131666919995393, 1.0990006786189168], [1.1131666919995393, 0.8539976380583784], [1.1131666919995393, 0.6114986034948473], [1.1118396791361385, 0.3665958430466068], [1.1131745380806568, 0.12087816871393707], [1.1102931823584017, -0.12364015580501309], [1.111656916051045, -0.36916674534780747], [1.1128421480945223, -0.6100129114712671], [1.1128421480945223, -0.8546898340623449], [1.1128421480945223, -1.1002276781572795], [1.2231666919995392, 1.0990006786189168], [1.2231666919995392, 0.8539976380583784], [1.2231666919995392, 0.6114986034948473], [1.2218396791361386, 0.3665958430466068], [1.223174538080657, 0.12087816871393707], [1.2202931823584018, -0.12364015580501309], [1.221656916051045, -0.36916674534780747], [1.2228421480945224, -0.6100129114712671], [1.2228421480945224, -0.8546898340623449], [1.2228421480945224, -1.1002276781572795], [1.3331666919995393, 1.0990006786189168], [1.3331666919995393, 0.8539976380583784], [1.3331666919995393, 0.6114986034948473], [1.3318396791361384, 0.3665958430466068], [1.3331745380806568, 0.12087816871393707], [1.3302931823584017, -0.12364015580501309], [1.331656916051045, -0.36916674534780747], [1.3328421480945223, -0.6100129114712671], [1.3328421480945223, -0.8546898340623449], [1.3328421480945223, -1.1002276781572795]])

		self.primary = self.pixel_list
		self.secondary = self.position_list

		#self.fu, self.fv = self.obtain_interpolation_functions()
		self.fu, self.fv = self.obtain_interpolation_rbf()

	def obtain_interpolation_functions(self):
		x = self.primary[:,0]
		y = self.primary[:,1]

		xp = self.secondary[:,0]
		yp = self.secondary[:,1]

		print len(x), len(y), len(xp), len(yp)

		fx = scipy.interpolate.interp2d(x, y, xp, kind='cubic')
		fy = scipy.interpolate.interp2d(x, y, yp, kind='cubic')
		return fx, fy

	def obtain_interpolation_rbf (self):
		u = self.primary[:,0]
		v = self.primary[:,1]
	
		x = self.secondary[:,0]
		y = self.secondary[:,1]

		rbf_x = scipy.interpolate.Rbf(u, v, x, function="linear", smooth=0) 
		rbf_y = scipy.interpolate.Rbf(u, v, y, function="linear", smooth=0)

		return rbf_x, rbf_y

	def track_cb(self, coor):
		self.manage_depth(coor.v.data, coor.u.data)

	def sensorization_conversion(self, x, y, z):
		dist = np.sqrt((x**2)+(y**2))
		angle = np.arctan(y/x)
		return dist, angle, z

	def manage_depth (self, u, v):
		msg = SensData()

		x_p = float(self.fu(u, v))
		y_p = float(self.fv(u, v))
		z_p = -0.03

		(dist, angle, height) = self.sensorization_conversion(x_p, y_p, z_p)
		msg.dist.data = dist
		msg.angle.data = angle
		msg.height.data = height
		msg.radius.data = 0.0
	
		self.obj_sensor_pub.publish(msg)

def main(args):
	obj_pos_int()
	rospy.spin()

if __name__ == '__main__':
	try:
		main(sys.argv)
	except RuntimeError, e:
		rospy.logerr('Something went wrong: %s' % (e.strerrror))
